package ${package};

import java.util.ArrayList;
import java.util.Collection;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.PreparedStatement;

import javax.sql.DataSource;

// Model class imports
#foreach ( $class in $model.allClasses )
#if ( $class.getMetadata( $storeClassMetadataId ).isStorable() && ${class.packageName} != ${package} )
import ${class.packageName}.${class.name};
#end
#end

/**
 * Generated JDBC storage mechanism for ${model.name}.
 *
 * @author Mr Modello
 */
public class ${model.name}JdbcStore
{
    private static ThreadLocal threadState = new ThreadLocal();

    private DataSource dataSource;

    // ----------------------------------------------------------------------
    //
    // ----------------------------------------------------------------------

#foreach ( $class in $model.allClasses )
#if ( $class.getMetadata( $storeClassMetadataId ).isStorable() )
    public final static String ${class.name}_field_names;

    public final static String ${class.name}_field_markers;
#end

#end
    static {
#foreach ( $class in $model.allClasses )
#if ( $class.getMetadata( $storeClassMetadataId ).isStorable() )
    ${class.name}_field_names =
#foreach ( $field in $class.fields )
        "$field.name, "
#end
        "1";

    ${class.name}_field_markers =
#foreach ( $field in $class.fields )
        "?, "
#end
        "1";
#end
#end
    }

    // ----------------------------------------------------------------------
    //
    // ----------------------------------------------------------------------

    public ${model.name}JdbcStore( DataSource dataSource )
    {
        this.dataSource = dataSource;
    }

    // ----------------------------------------------------------------------
    //
    // ----------------------------------------------------------------------

    public static class ThreadState
    {
        private Connection con;

        private int depth;

        public Connection getConnection()
        {
            return con;
        }

        public int getDepth()
        {
            return depth;
        }
    }

    // ----------------------------------------------------------------------
    // Transaction Management Methods
    // ----------------------------------------------------------------------

    public ThreadState getThreadState()
    {
        return (ThreadState) threadState.get();
    }

    public Connection begin()
        throws SQLException
    {
        ThreadState state = (ThreadState) threadState.get();

        if ( state == null )
        {
            state = new ThreadState();

            state.con = dataSource.getConnection();

            threadState.set( state );

            return state.con;
        }
        else
        {
            state.depth++;

            return state.con;
        }
    }

    public void commit( Statement stmt, ResultSet rs )
        throws SQLException
    {
        ThreadState state = (ThreadState) threadState.get();

        if ( state == null )
        {
            throw new SQLException( "commit() must only be called after begin()." );
        }

        if ( state.depth > 0 )
        {
            state.depth--;

            return;
        }

        threadState.set( null );

        try
        {
            state.con.commit();
        }
        catch( SQLException ex )
        {
            state.con.rollback();

            throw ex;
        }
        finally
        {
            closeConnection( state.con, stmt, rs );
        }
    }

    public void rollback( Statement stmt, ResultSet rs )
        throws SQLException
    {
        ThreadState state = (ThreadState) threadState.get();

        if ( state == null )
        {
            // The con is not active because it has already been committed or rolled back

            return;
        }

        threadState.set( null );

        try
        {
            state.con.rollback();
        }
        finally
        {
            closeConnection( state.con, stmt, rs );
        }
    }

    // ----------------------------------------------------------------------
    // ResultSet to Object methods
    // ----------------------------------------------------------------------
#foreach ( $class in $model.allClasses )

#if ( $class.getMetadata( $storeClassMetadataId ).isStorable() )
    public static ${class.name} resultSetTo${class.name}( ResultSet rs )
        throws SQLException
    {
        ${class.name} object = new ${class.name}();

        return object;
    }
#end
#end
#foreach ( $class in $model.allClasses )
#if ( $class.getMetadata( $storeClassMetadataId ).isStorable() )
    // ----------------------------------------------------------------------
    // ${class.name} CRUD
    // ----------------------------------------------------------------------

    public void add${class.name}( $class.name o )
        throws Exception
    {
        PreparedStatement stmt = null ;

        try
        {
            Connection con = begin();

            stmt = con.prepareStatement( "insert into ${class.name} values( " + ${class.name}_field_markers + " )" );

            stmt.executeUpdate();

            commit( stmt, null );
        }
        catch( Exception ex )
        {
            rollback( stmt, null );

            throw ex;
        }
    }

    public void delete${class.name}( String id )
        throws Exception
    {
        PreparedStatement stmt = null;

        try
        {
            Connection con = begin();

            stmt = con.prepareStatement( "delete from " );

            stmt.setString( 1, id );

            stmt.executeUpdate();

            commit( stmt, null );
        }
        catch( Exception ex )
        {
            rollback( stmt, null );

            throw ex;
        }
    }

    public ${class.name} get${class.name}( String id )
        throws Exception
    {
        PreparedStatement stmt = null;

        ResultSet rs = null;

        try
        {
            Connection con = begin();

            stmt = con.prepareStatement( "delete from " );

            stmt.setString( 1, id );

            rs = stmt.executeQuery();

            if ( !rs.next() )
            {
                throw new Exception( "No such object of type ${class.name} with id '" + id + "'." );
            }

            ${class.name} object = new ${class.name}();

            if( rs.next() )
            {
                throw new Exception( "When getting object of type ${class.name} with id '" + id + "' multiple objects was returned." );
            }

            rs.close();

            commit( stmt, rs );

            return object;
        }
        catch( Exception ex )
        {
            rollback( stmt, rs );

            throw ex;
        }
    }

    public Collection get${class.name}Collection( String query )
        throws Exception
    {
        PreparedStatement stmt = null;

        ResultSet rs = null;

        try
        {
            Connection con = begin();

            stmt = con.prepareStatement( "select " + ${class.name}_field_names + " from ${class.name} " + query );

            rs = stmt.executeQuery();

            Collection result  = new ArrayList();

            while( rs.next() )
            {
                result.add( resultSetTo${class.name}( rs ) );
            }

            commit( stmt, rs );

            return result;
        }
        catch( Exception ex )
        {
            rollback( stmt, rs );

            throw ex;
        }
    }
#end

#end

    // ----------------------------------------------------------------------
    // Utility Methods
    // ----------------------------------------------------------------------

    private void closeConnection( Connection con, Statement stmt, ResultSet rs )
    {
        if ( rs != null )
        {
            try
            {
                rs.close();
            }
            catch( SQLException ex )
            {
                ex.printStackTrace();
            }
        }

        if ( stmt != null )
        {
            try
            {
                stmt.close();
            }
            catch( SQLException ex )
            {
                ex.printStackTrace();
            }
        }

        try
        {
            con.close();
        }
        catch( SQLException ex )
        {
            ex.printStackTrace();
        }
    }
}
