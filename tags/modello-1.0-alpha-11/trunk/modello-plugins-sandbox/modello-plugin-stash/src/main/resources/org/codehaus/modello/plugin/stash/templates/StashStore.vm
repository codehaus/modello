package ${package};

import org.codehaus.stash.ObjectDatabase;
import org.codehaus.stash.ObjectStore;

/**
 * Generated Stash storage mechanism for the $model.name model.
 *
 * @author Mr Modello
 */
public class ${model.name}StashStore
    implements Initializable, Startable
{
    private String databaseDirectory;

    private ObjectDatabase database;

    private ObjectStore store;

    private boolean databaseCreated;

    // ----------------------------------------------------------------------
    // Component Lifecycle
    // ----------------------------------------------------------------------

    public void initialize()
        throws ${model.name}StoreException
    {
        if ( !databaseCreated )
        {
            createDatabase();

            File f = new File( databaseDirectory );

            if ( !f.exists() )
            {
                f.mkdirs();
            }

            try
            {
                database = new ObjectDatabase( databaseDirectory );

#foreach ( $class in $model.allClasses )
#if ( $class.getMetadata( $metadataId ).isStorable() )
                store = database.createStore( ${class.name}.class );
##
##                store.createIndex( String.class, "name" );
#end

#end
            }
            catch ( Exception e )
            {
                throw new ${model.name}StoreException( "Cannot create database: ", e );
            }

            databaseCreated = true;
        }
    }

    public void start()
        throws ${model.name}StoreException
    {
    }

    public void stop()
        throws ${model.name}StoreException
    {
    }

#foreach ( $class in $model.allClasses )
    // ----------------------------------------------------------------------
    // $class.name storage methods
    // ----------------------------------------------------------------------

#if ( $class.getMetadata( $metadataId ).isStorable() )
    public void add${class.name}( $class.name entity )
        throws ${model.name}StoreException
    {
        try
        {
            String id = Long.toString( store.insert( entity ) );

            entity.setId( id );

            store.update( id, entity );

            return id;
        }
        catch ( Exception e )
        {
            throw new ${model.name}StoreException( "Cannot insert new $class.name: ", e );
        }
    }

    public void delete${class.name}( String id )
        throws ${model.name}StoreException
    {
        try
        {
            store.delete( id );
        }
        catch ( Exception e )
        {
            throw new ${model.name}StoreException( "Cannot delete $class.name: ", e );
        }
    }

    public void update${class.name}( String id, $class.name entity )
        throws ${model.name}StoreException
    {
        try
        {
            store.update( id, entity );
        }
        catch ( Exception e )
        {
            throw new ${model.name}StoreException( "Cannot update $class.name: ", e );
        }
    }
#end

#end
}
