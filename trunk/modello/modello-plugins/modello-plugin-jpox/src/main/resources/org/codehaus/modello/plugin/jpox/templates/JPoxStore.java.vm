package ${package};

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

import javax.jdo.Extent;
import javax.jdo.Query;
import javax.jdo.PersistenceManager;
import javax.jdo.PersistenceManagerFactory;
import javax.jdo.Transaction;

/**
 * Generated JPox storage mechanism for ${model.name}.
 *
 * @author Mr Modello
 */
public class ${model.name}JPoxStore
{
    private PersistenceManagerFactory pmf;

    public ${model.name}JPoxStore( PersistenceManagerFactory pmf )
    {
        this.pmf = pmf;
    }

    // ----------------------------------------------------------------------
    // Utility Methods
    // ----------------------------------------------------------------------

    public Transaction beginTransaction()
        throws Exception
    {
        PersistenceManager pm = pmf.getPersistenceManager();

        Transaction tx = pm.currentTransaction();

        tx.begin();

        return tx;
    }

    public void commitTransaction( Transaction tx )
    {
        try
        {
            tx.commit();
        }
        finally
        {
            close( tx );
        }
    }

#foreach ( $class in $model.allClasses )
#if ( $class.getMetadata( $storeClassMetadataId ).isStorable() )
    // ----------------------------------------------------------------------
    // ${class.name} CRUD
    // ----------------------------------------------------------------------

    public Object add${class.name}( $class.name o )
        throws Exception
    {
        PersistenceManager pm = pmf.getPersistenceManager();

        Transaction tx = pm.currentTransaction();

        try
        {
            tx.begin();

            pm.makePersistent( o );

            Object id = pm.getObjectId( o );

            tx.commit();

            return id;
        }
        finally
        {
            close( tx );
        }
    }

    public void delete${class.name}( String id )
        throws Exception
    {
        PersistenceManager pm = pmf.getPersistenceManager();

        Transaction tx = pm.currentTransaction();

        try
        {
            tx.begin();

            Query query = pm.newQuery( ${class.name}.class );

            query.setIgnoreCache( true );

            query.setFilter( "this.id == \"" + id + "\"" );

            Collection result = (Collection) query.execute();

            if ( result.isEmpty() )
            {
                throw new RuntimeException( "Not such object of type \"${class.name}\" with id: \"" + id + "\"." );
            }

            pm.deletePersistentAll( result );

            tx.commit();
        }
        finally
        {
            close( tx );
        }
    }

    public ${class.name} get${class.name}( String id )
        throws Exception
    {
        PersistenceManager pm = pmf.getPersistenceManager();

        Transaction tx = pm.currentTransaction();

        try
        {
            tx.begin();

            Query query = pm.newQuery( ${class.name}.class );

            query.setIgnoreCache( true );

            query.setFilter( "this.id == \"" + id + "\"" );

            Collection result = (Collection) query.execute();

            if ( result.isEmpty() )
            {
                throw new RuntimeException( "Not such object of type \"${class.name}\" with id: \"" + id + "\"." );
            }

            ${class.name} object = (${class.name}) result.iterator().next();

            pm.makeTransient( object );

            tx.commit();

            return object;
        }
        finally
        {
            close( tx );
        }
    }

    public ${class.name} get${class.name}ByJdoId( Object id )
        throws Exception
    {
        PersistenceManager pm = pmf.getPersistenceManager();

        Transaction tx = pm.currentTransaction();

        try
        {
            tx.begin();

            ${class.name} object = (${class.name}) pm.getObjectById( id, true );

            pm.makeTransient( object );

            tx.commit();

            return object;
        }
        finally
        {
            close( tx );
        }
    }

    public Collection get${class.name}Collection()
        throws Exception
    {
        PersistenceManager pm = pmf.getPersistenceManager();

        Transaction tx = pm.currentTransaction();

        Collection collection;

        try
        {
            tx.begin();
#*
            Extent extent = pm.getExtent( ${class.name}.class, true );

            Iterator it = extent.iterator();
*#
            Query query = pm.newQuery( ${class.name}.class );

            Iterator it = ((Collection) query.execute() ).iterator();

            collection = new ArrayList();

            while( it.hasNext() )
            {
                Object o = it.next();

##              Make transient?

                pm.refresh( o );

                pm.makeTransient( o );

                collection.add( o );
            }

            tx.commit();

            return collection;
        }
        finally
        {
            close( tx );
        }
    }
#end

#end

    // ----------------------------------------------------------------------
    // Utility Methods
    // ----------------------------------------------------------------------

    private void close( Transaction tx )
    {
        PersistenceManager pm = tx.getPersistenceManager();

        if( tx.isActive() )
        {
            tx.rollback();
        }

        pm.evictAll();

        pm.close();
    }
}
