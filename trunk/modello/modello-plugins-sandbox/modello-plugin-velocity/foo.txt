package org.mergere.tissue;

import org.codehaus.stash.ObjectDatabase;
import org.codehaus.stash.ObjectStore;

/**
 * Generated Prevayler storage mechanism for Tissue
 * @author Mr Modello
 */

public class TissuePrevaylerStore
    extends ${extends}
    implements Initializable, Startable
{
    private String databaseDirectory;

    private static class Store
        implements Serializable
    {
        private Map IssueMap = new HashMap();
        private Map ProjectMap = new HashMap();
        private Map UserMap = new HashMap();
    }

    // ----------------------------------------------------------------------
    // Transactions
    // ----------------------------------------------------------------------

    public class AddIssue
        implements TransactionWithQuery
    {
        private final Task task;

        public AddTask(String description, int priority)
        {
            this.task = new Task(description, priority);
        }

        public Object executeAndQuery(Object prevalentSystem, Date executionTime)
          throws Exception
        {

            TaskList system = (TaskList) prevalentSystem;

            system.addTask(task);

            return task;
        }
    }

    public class RemoveIssue
        implements Transaction
    {
        private Task task;

        public RemoveTask(Task task)
        {
            this.task = task;
        }

        public void executeOn(Object prevalentSystem, Date executionTime)
        {
            TaskList system = (TaskList) prevalentSystem;

            system.removeTask(task);
        }
    }

    public class AddProject
        implements TransactionWithQuery
    {
        private final Task task;

        public AddTask(String description, int priority)
        {
            this.task = new Task(description, priority);
        }

        public Object executeAndQuery(Object prevalentSystem, Date executionTime)
          throws Exception
        {

            TaskList system = (TaskList) prevalentSystem;

            system.addTask(task);

            return task;
        }
    }

    public class RemoveProject
        implements Transaction
    {
        private Task task;

        public RemoveTask(Task task)
        {
            this.task = task;
        }

        public void executeOn(Object prevalentSystem, Date executionTime)
        {
            TaskList system = (TaskList) prevalentSystem;

            system.removeTask(task);
        }
    }

    public class AddUser
        implements TransactionWithQuery
    {
        private final Task task;

        public AddTask(String description, int priority)
        {
            this.task = new Task(description, priority);
        }

        public Object executeAndQuery(Object prevalentSystem, Date executionTime)
          throws Exception
        {

            TaskList system = (TaskList) prevalentSystem;

            system.addTask(task);

            return task;
        }
    }

    public class RemoveUser
        implements Transaction
    {
        private Task task;

        public RemoveTask(Task task)
        {
            this.task = task;
        }

        public void executeOn(Object prevalentSystem, Date executionTime)
        {
            TaskList system = (TaskList) prevalentSystem;

            system.removeTask(task);
        }
    }


    // ----------------------------------------------------------------------
    // Component Lifecycle
    // ----------------------------------------------------------------------

    public void initialize()
        throws Exception
    {
    }

    public void start()
        throws TissueStoreException
    {
    }

    public void stop()
        throws TissueStoreException
    {
    }

    // ----------------------------------------------------------------------
    // Storage methods
    // ----------------------------------------------------------------------

    public void addIssue( Issue entity )
        throws StoreException
    {
    }

    public void delete( String id )
        throws StoreException
    {
    }

    public void update( String id, Issue entity )
        throws StoreException
    {
    }

    public void addProject( Project entity )
        throws StoreException
    {
    }

    public void delete( String id )
        throws StoreException
    {
    }

    public void update( String id, Project entity )
        throws StoreException
    {
    }

    public void addUser( User entity )
        throws StoreException
    {
    }

    public void delete( String id )
        throws StoreException
    {
    }

    public void update( String id, User entity )
        throws StoreException
    {
    }

}