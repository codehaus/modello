/*
 * $Id$
 */

package org.apache.maven.model.v4_0_0;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import java.util.Date;

/**
 * null
 * 
 * @version $Revision$ $Date$
 */
public class Build implements java.io.Serializable {


      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Field sourceDirectory
     */
    private String sourceDirectory;

    /**
     * Field unitTestSourceDirectory
     */
    private String unitTestSourceDirectory;

    /**
     * Field aspectSourceDirectory
     */
    private String aspectSourceDirectory;

    /**
     * Field integrationUnitTestSourceDirectory
     */
    private String integrationUnitTestSourceDirectory;

    /**
     * Field sourceModifications
     */
    private java.util.List sourceModifications;

    /**
     * Field unitTest
     */
    private UnitTest unitTest = new UnitTest();

    /**
     * Field resources
     */
    private java.util.List resources;

    /**
     * Field directory
     */
    private String directory;

    /**
     * Field output
     */
    private String output;

    /**
     * Field finalName
     */
    private String finalName;

    /**
     * Field testOutput
     */
    private String testOutput;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method addResource
     * 
     * @param resource
     */
    public void addResource(Resource resource)
    {
        if ( !(resource instanceof Resource) )
        {
            throw new ClassCastException( "Build.addResources(resource) parameter must be instanceof " + Resource.class.getName() );
        }
        getResources().add( resource );
    } //-- void addResource(Resource) 

    /**
     * Method addSourceModification
     * 
     * @param sourceModification
     */
    public void addSourceModification(SourceModification sourceModification)
    {
        if ( !(sourceModification instanceof SourceModification) )
        {
            throw new ClassCastException( "Build.addSourceModifications(sourceModification) parameter must be instanceof " + SourceModification.class.getName() );
        }
        getSourceModifications().add( sourceModification );
    } //-- void addSourceModification(SourceModification) 

    /**
     * Get 
     *             This element specifies a directory containing
     * Aspect
     *             sources of the project.  The generated build
     * system will
     *             compile the Aspects in this directory when the
     * project is
     *             built if Aspects have been enabled (see the
     *             <a
     *               href="plugins/aspectj/goals.html">Aspectj
     * goals</a> document).
     *             The path given is relative to the project
     * descriptor.
     *           
     */
    public String getAspectSourceDirectory()
    {
        return this.aspectSourceDirectory;
    } //-- String getAspectSourceDirectory() 

    /**
     * Get 
     *             The directory where all generated by the build
     * is placed.
     *           
     */
    public String getDirectory()
    {
        return this.directory;
    } //-- String getDirectory() 

    /**
     * Get 
     *             The filename (including an extension, but with
     * no path information) that the produced artifact
     *             will be called. The default value is
     * artifactId-version.extension (where extension is derived
     * from
     *             type).
     *           
     */
    public String getFinalName()
    {
        return this.finalName;
    } //-- String getFinalName() 

    /**
     * Get 
     *             This element specifies a directory containing
     * integration test
     *             sources of the project.
     *           
     */
    public String getIntegrationUnitTestSourceDirectory()
    {
        return this.integrationUnitTestSourceDirectory;
    } //-- String getIntegrationUnitTestSourceDirectory() 

    /**
     * Get 
     *             The directory where compiled application classes
     * are placed.
     *           
     */
    public String getOutput()
    {
        return this.output;
    } //-- String getOutput() 

    /**
     * Method getResources
     */
    public java.util.List getResources()
    {
        if ( this.resources == null )
        {
            this.resources = new java.util.ArrayList();
        }
        
        return this.resources;
    } //-- java.util.List getResources() 

    /**
     * Get 
     *             This element specifies a directory containing
     * the source
     *             of the project. The generated build system will
     * compile
     *             the source in this directory when the project is
     * built.
     *             The path given is relative to the project
     * descriptor.
     *           
     */
    public String getSourceDirectory()
    {
        return this.sourceDirectory;
    } //-- String getSourceDirectory() 

    /**
     * Method getSourceModifications
     */
    public java.util.List getSourceModifications()
    {
        if ( this.sourceModifications == null )
        {
            this.sourceModifications = new java.util.ArrayList();
        }
        
        return this.sourceModifications;
    } //-- java.util.List getSourceModifications() 

    /**
     * Get 
     *             The directory where compiled test classes are
     * placed.
     *           
     */
    public String getTestOutput()
    {
        return this.testOutput;
    } //-- String getTestOutput() 

    /**
     * Get This element specifies unit tests associated with the
     * project.
     */
    public UnitTest getUnitTest()
    {
        return this.unitTest;
    } //-- UnitTest getUnitTest() 

    /**
     * Get 
     *             This element specifies a directory containing
     * the unit test
     *             source of the project. The generated build
     * system will
     *             compile these directories when the project is
     * being tested.
     *             The unit tests must use the JUnit test
     * framework.
     *             The path given is relative to the project
     * descriptor.
     *           
     */
    public String getUnitTestSourceDirectory()
    {
        return this.unitTestSourceDirectory;
    } //-- String getUnitTestSourceDirectory() 

    /**
     * Method removeResource
     * 
     * @param resource
     */
    public void removeResource(Resource resource)
    {
        if ( !(resource instanceof Resource) )
        {
            throw new ClassCastException( "Build.removeResources(resource) parameter must be instanceof " + Resource.class.getName() );
        }
        getResources().remove( resource );
    } //-- void removeResource(Resource) 

    /**
     * Method removeSourceModification
     * 
     * @param sourceModification
     */
    public void removeSourceModification(SourceModification sourceModification)
    {
        if ( !(sourceModification instanceof SourceModification) )
        {
            throw new ClassCastException( "Build.removeSourceModifications(sourceModification) parameter must be instanceof " + SourceModification.class.getName() );
        }
        getSourceModifications().remove( sourceModification );
    } //-- void removeSourceModification(SourceModification) 

    /**
     * Set 
     *             This element specifies a directory containing
     * Aspect
     *             sources of the project.  The generated build
     * system will
     *             compile the Aspects in this directory when the
     * project is
     *             built if Aspects have been enabled (see the
     *             <a
     *               href="plugins/aspectj/goals.html">Aspectj
     * goals</a> document).
     *             The path given is relative to the project
     * descriptor.
     *           
     * 
     * @param aspectSourceDirectory
     */
    public void setAspectSourceDirectory(String aspectSourceDirectory)
    {
        this.aspectSourceDirectory = aspectSourceDirectory;
    } //-- void setAspectSourceDirectory(String) 

    /**
     * Set 
     *             The directory where all generated by the build
     * is placed.
     *           
     * 
     * @param directory
     */
    public void setDirectory(String directory)
    {
        this.directory = directory;
    } //-- void setDirectory(String) 

    /**
     * Set 
     *             The filename (including an extension, but with
     * no path information) that the produced artifact
     *             will be called. The default value is
     * artifactId-version.extension (where extension is derived
     * from
     *             type).
     *           
     * 
     * @param finalName
     */
    public void setFinalName(String finalName)
    {
        this.finalName = finalName;
    } //-- void setFinalName(String) 

    /**
     * Set 
     *             This element specifies a directory containing
     * integration test
     *             sources of the project.
     *           
     * 
     * @param integrationUnitTestSourceDirectory
     */
    public void setIntegrationUnitTestSourceDirectory(String integrationUnitTestSourceDirectory)
    {
        this.integrationUnitTestSourceDirectory = integrationUnitTestSourceDirectory;
    } //-- void setIntegrationUnitTestSourceDirectory(String) 

    /**
     * Set 
     *             The directory where compiled application classes
     * are placed.
     *           
     * 
     * @param output
     */
    public void setOutput(String output)
    {
        this.output = output;
    } //-- void setOutput(String) 

    /**
     * Set 
     *             This element describes all of the resources
     * associated with a project or unit tests.
     *             Each resource is described by a resource
     * element, which is then described by additional
     *             elements (described
     *             <a href="#resource">below</a>). These resources
     * are used to
     *             complete the jar file or to run unit test.
     *           
     * 
     * @param resources
     */
    public void setResources(java.util.List resources)
    {
        this.resources = resources;
    } //-- void setResources(java.util.List) 

    /**
     * Set 
     *             This element specifies a directory containing
     * the source
     *             of the project. The generated build system will
     * compile
     *             the source in this directory when the project is
     * built.
     *             The path given is relative to the project
     * descriptor.
     *           
     * 
     * @param sourceDirectory
     */
    public void setSourceDirectory(String sourceDirectory)
    {
        this.sourceDirectory = sourceDirectory;
    } //-- void setSourceDirectory(String) 

    /**
     * Set 
     *             This element describes all of the
     * sourceModifications associated with a
     *             project.  Each source modification is described
     * by a
     *             <code>sourceModification</code> element, which
     * is then described by
     *             additional elements (described below).  These
     * modifications are used
     *             to exclude or include various source depending
     * on the environment
     *             the build is running in.
     *           
     * 
     * @param sourceModifications
     */
    public void setSourceModifications(java.util.List sourceModifications)
    {
        this.sourceModifications = sourceModifications;
    } //-- void setSourceModifications(java.util.List) 

    /**
     * Set 
     *             The directory where compiled test classes are
     * placed.
     *           
     * 
     * @param testOutput
     */
    public void setTestOutput(String testOutput)
    {
        this.testOutput = testOutput;
    } //-- void setTestOutput(String) 

    /**
     * Set This element specifies unit tests associated with the
     * project.
     * 
     * @param unitTest
     */
    public void setUnitTest(UnitTest unitTest)
    {
        this.unitTest = unitTest;
    } //-- void setUnitTest(UnitTest) 

    /**
     * Set 
     *             This element specifies a directory containing
     * the unit test
     *             source of the project. The generated build
     * system will
     *             compile these directories when the project is
     * being tested.
     *             The unit tests must use the JUnit test
     * framework.
     *             The path given is relative to the project
     * descriptor.
     *           
     * 
     * @param unitTestSourceDirectory
     */
    public void setUnitTestSourceDirectory(String unitTestSourceDirectory)
    {
        this.unitTestSourceDirectory = unitTestSourceDirectory;
    } //-- void setUnitTestSourceDirectory(String) 


    private String modelEncoding = "UTF-8";

    public void setModelEncoding( String modelEncoding )
    {
        this.modelEncoding = modelEncoding;
    }

    public String getModelEncoding()
    {
        return modelEncoding;
    }}
