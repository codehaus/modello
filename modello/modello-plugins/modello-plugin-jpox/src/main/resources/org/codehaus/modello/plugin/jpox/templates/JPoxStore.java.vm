package ${package};

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

import javax.jdo.Query;
import javax.jdo.PersistenceManager;
import javax.jdo.PersistenceManagerFactory;
import javax.jdo.JDOUserException;
import javax.jdo.Transaction;

// Model class imports
#foreach ( $class in $classes )
#if ( $class.getMetadata( $storeClassMetadataId ).isStorable() && ${class.packageName} != ${package} )
import ${class.packageName}.${class.name};
#end
#end

/**
 * Generated JPox storage mechanism for ${model.name}.
 *
 * @author Mr Modello
 */
public class ${model.name}JPoxStore
{
    private static ThreadLocal threadState = new ThreadLocal();

    private PersistenceManagerFactory pmf;

    public ${model.name}JPoxStore( PersistenceManagerFactory pmf )
    {
        this.pmf = pmf;
    }

    // ----------------------------------------------------------------------
    //
    // ----------------------------------------------------------------------

    public static class ThreadState
    {
        private PersistenceManager pm;

        private Transaction tx;

        private int depth;

        public PersistenceManager getPersistenceManager()
        {
            return pm;
        }

        public Transaction getTransaction()
        {
            return tx;
        }

        public int getDepth()
        {
            return depth;
        }
    }

    // ----------------------------------------------------------------------
    // Transaction Management Methods
    // ----------------------------------------------------------------------

    public ThreadState getThreadState()
    {
        return (ThreadState) threadState.get();
    }

    public PersistenceManager begin()
        throws Exception
    {
        ThreadState state = (ThreadState) threadState.get();

        if ( state == null )
        {
            state = new ThreadState();

            state.pm = pmf.getPersistenceManager();

            state.tx = state.pm.currentTransaction();

            state.tx.begin();

            threadState.set( state );

            return state.pm;
        }
        else
        {
            state.depth++;

            return state.pm;
        }
    }

    public void commit()
        throws Exception
    {
        ThreadState state = (ThreadState) threadState.get();

        if ( state == null )
        {
            throw new Exception( "commit() must only be called after begin()." );
        }

        if ( state.depth > 0 )
        {
            state.depth--;

            return;
        }

        threadState.set( null );

        try
        {
            state.tx.commit();
        }
        catch( Exception ex )
        {
            if ( state.tx.isActive() )
            {
                state.tx.rollback();
            }

            throw ex;
        }
        finally
        {
            closePersistenceManager( state.pm );
        }
    }

    public void rollback()
        throws Exception
    {
        ThreadState state = (ThreadState) threadState.get();

        if ( state == null )
        {
            // The tx is not active because it has already been committed or rolled back

            return;
        }

        threadState.set( null );

        try
        {
            if ( state.tx.isActive() )
            {
                state.tx.rollback();
            }
        }
        finally
        {
            closePersistenceManager( state.pm );
        }
    }

#foreach ( $class in $classes )
#if ( $class.getMetadata( $storeClassMetadataId ).isStorable() )
    // ----------------------------------------------------------------------
    // ${class.name} CRUD
    // ----------------------------------------------------------------------

    public Object add${class.name}( $class.name o )
        throws Exception
    {
        try
        {
            PersistenceManager pm = begin();

            pm.makePersistent( o );

            Object id = pm.getObjectId( o );

            commit();

            return id;
        }
        catch( Exception ex )
        {
            rollback();

            throw ex;
        }
    }

    public void delete${class.name}( String id )
        throws Exception
    {
        try
        {
            PersistenceManager pm = begin();

            Query query = pm.newQuery( ${class.name}.class );

            query.setIgnoreCache( true );

            query.setFilter( "this.id == \"" + id + "\"" );

            Collection result = (Collection) query.execute();

            if ( result.isEmpty() )
            {
                throw new RuntimeException( "Not such object of type \"${class.name}\" with id: \"" + id + "\"." );
            }

            pm.deletePersistentAll( result );

            commit();
        }
        catch( Exception ex )
        {
            rollback();

            throw ex;
        }
    }

    public ${class.name} get${class.name}( String id, boolean makeTransient )
        throws Exception
    {
        try
        {
            PersistenceManager pm = begin();

            Query query = pm.newQuery( ${class.name}.class );

            query.setIgnoreCache( true );

            query.setFilter( "this.id == \"" + id + "\"" );

            Collection result = (Collection) query.execute();

            if ( result.isEmpty() )
            {
                throw new RuntimeException( "Not such object of type \"${class.name}\" with id: \"" + id + "\"." );
            }

            ${class.name} object = (${class.name}) result.iterator().next();

            if ( makeTransient )
            {
                pm.makeTransient( object );
            }

            commit();

            return object;
        }
        catch( Exception ex )
        {
            rollback();

            throw ex;
        }
    }

    public ${class.name} get${class.name}ByJdoId( Object id, boolean makeTransient )
        throws Exception
    {
        try
        {
            PersistenceManager pm = begin();

            ${class.name} object = (${class.name}) pm.getObjectById( id, true );

            if ( makeTransient )
            {
                pm.makeTransient( object );
            }

            commit();

            return object;
        }
        catch( Exception ex )
        {
            rollback();

            throw ex;
        }
    }

    public Collection get${class.name}Collection( boolean makeTransient, String filter, String ordering )
        throws Exception
    {
        try
        {
            PersistenceManager pm = begin();

            Query query = pm.newQuery( ${class.name}.class );

            if ( ordering != null )
            {
                query.setOrdering( ordering );
            }

            if ( filter != null )
            {
                query.setFilter( filter );
            }

            Collection result = ((Collection) query.execute() );

            Collection collection;

            if ( makeTransient )
            {
                collection = new ArrayList();

                for ( Iterator it = result.iterator(); it.hasNext(); )
                {
                    Object object = it.next();

                    pm.refresh( object );

                    pm.makeTransient( object );

                    collection.add( object );
                }
            }
            else
            {
                collection = result;
            }

            commit();

            return collection;
        }
        catch( Exception ex )
        {
            rollback();

            throw ex;
        }
    }
#end

#end

    // ----------------------------------------------------------------------
    // Utility Methods
    // ----------------------------------------------------------------------

    private void closePersistenceManager( PersistenceManager pm )
    {
        try
        {
            pm.close();
        }
        catch( JDOUserException ex )
        {
            ex.printStackTrace();
        }
    }
}
