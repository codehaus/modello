package org.mergere.tissue;

import org.codehaus.stash.ObjectDatabase;
import org.codehaus.stash.ObjectStore;

/**
 * Generated Prevayler storage mechanism for Tissue
 * @author Mr Modello
 */

public class TissuePrevaylerStore
    extends ${extends}
    implements Initializable, Startable
{
    private String databaseDirectory;

    private Store store = new Store();

    static class Store
        implements Serializable
    {
        private Map IssueMap = new HashMap();

        void addIssue( Issue o ) { IssueMap.put(); }

        void updateIssue( Issue o ) { IssueMap.put() }

        void deleteIssue( Issue o ) { IssueMap.remove() }

        private Map ProjectMap = new HashMap();

        void addProject( Project o ) { ProjectMap.put(); }

        void updateProject( Project o ) { ProjectMap.put() }

        void deleteProject( Project o ) { ProjectMap.remove() }

        private Map UserMap = new HashMap();

        void addUser( User o ) { UserMap.put(); }

        void updateUser( User o ) { UserMap.put() }

        void deleteUser( User o ) { UserMap.remove() }

    }

    // ----------------------------------------------------------------------
    // Transactions
    // ----------------------------------------------------------------------

    public class AddIssue
        implements TransactionWithQuery
    {
        private final Issue o;

        public AddIssue( Issue o )
        {
            this.o = o;
        }

        public Object executeAndQuery(Object prevalentSystem, Date executionTime)
            throws Exception
        {
            Store system = (Store) prevalentSystem;

            system.addIssue( o );

            return o;
        }
    }

    public class DeleteIssue
        implements Transaction
    {
        private Issue o;

        public RemoveIssue( Issue o )
        {
            this.o = o;
        }

        public void executeOn(Object prevalentSystem, Date executionTime)
        {
            Store system = (Store) prevalentSystem;

            system.deleteIssue( o );
        }
    }

    public class AddProject
        implements TransactionWithQuery
    {
        private final Project o;

        public AddProject( Project o )
        {
            this.o = o;
        }

        public Object executeAndQuery(Object prevalentSystem, Date executionTime)
            throws Exception
        {
            Store system = (Store) prevalentSystem;

            system.addProject( o );

            return o;
        }
    }

    public class DeleteProject
        implements Transaction
    {
        private Project o;

        public RemoveProject( Project o )
        {
            this.o = o;
        }

        public void executeOn(Object prevalentSystem, Date executionTime)
        {
            Store system = (Store) prevalentSystem;

            system.deleteProject( o );
        }
    }

    public class AddUser
        implements TransactionWithQuery
    {
        private final User o;

        public AddUser( User o )
        {
            this.o = o;
        }

        public Object executeAndQuery(Object prevalentSystem, Date executionTime)
            throws Exception
        {
            Store system = (Store) prevalentSystem;

            system.addUser( o );

            return o;
        }
    }

    public class DeleteUser
        implements Transaction
    {
        private User o;

        public RemoveUser( User o )
        {
            this.o = o;
        }

        public void executeOn(Object prevalentSystem, Date executionTime)
        {
            Store system = (Store) prevalentSystem;

            system.deleteUser( o );
        }
    }


    // ----------------------------------------------------------------------
    // Component Lifecycle
    // ----------------------------------------------------------------------

    public void initialize()
        throws Exception
    {
    }

    public void start()
        throws TissueStoreException
    {
    }

    public void stop()
        throws TissueStoreException
    {
    }

    // ----------------------------------------------------------------------
    // Storage methods
    // ----------------------------------------------------------------------

    public void addIssue( Issue o )
        throws StoreException
    {
        store.addIssue( o );
    }

    public void updateIssue( String id, Issue o )
        throws StoreException
    {
        store.updateIssue( o );
    }

    public void deleteIssue( String id )
        throws StoreException
    {
        store.addIssue( id );
    }

    public void getIssue( String id )
        throws StoreException
    {
        store.getIssue( id );
    }

    public void addProject( Project o )
        throws StoreException
    {
        store.addProject( o );
    }

    public void updateProject( String id, Project o )
        throws StoreException
    {
        store.updateProject( o );
    }

    public void deleteProject( String id )
        throws StoreException
    {
        store.addProject( id );
    }

    public void getProject( String id )
        throws StoreException
    {
        store.getProject( id );
    }

    public void addUser( User o )
        throws StoreException
    {
        store.addUser( o );
    }

    public void updateUser( String id, User o )
        throws StoreException
    {
        store.updateUser( o );
    }

    public void deleteUser( String id )
        throws StoreException
    {
        store.addUser( id );
    }

    public void getUser( String id )
        throws StoreException
    {
        store.getUser( id );
    }

}